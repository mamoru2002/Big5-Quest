name: Deploy API to EC2

on:
  push:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: prod-deploy
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 必須Secretsが無いと早期Fail（値はActions側のSecrets）
      - name: Preflight secrets
        run: |
          set -e
          test -n "${{ secrets.DEPLOY_HOST }}" || { echo "::error::DEPLOY_HOST missing"; exit 1; }
          test -n "${{ secrets.DEPLOY_USER }}" || { echo "::error::DEPLOY_USER missing"; exit 1; }
          test -n "${{ secrets.DEPLOY_SSH_KEY }}" || { echo "::error::DEPLOY_SSH_KEY missing"; exit 1; }
          test -n "${{ secrets.DEPLOY_HOST_FINGERPRINT }}" || { echo "::error::DEPLOY_HOST_FINGERPRINT missing"; exit 1; }
          test -n "${{ secrets.SECRET_KEY_BASE }}" || { echo "::error::SECRET_KEY_BASE missing"; exit 1; }
          test -n "${{ secrets.DB_HOST }}" || { echo "::error::DB_HOST missing"; exit 1; }
          test -n "${{ secrets.DB_PORT }}" || { echo "::error::DB_PORT missing"; exit 1; }
          test -n "${{ secrets.DB_NAME }}" || { echo "::error::DB_NAME missing"; exit 1; }
          test -n "${{ secrets.DB_USERNAME }}" || { echo "::error::DB_USERNAME missing"; exit 1; }
          test -n "${{ secrets.DB_PASSWORD }}" || { echo "::error::DB_PASSWORD missing"; exit 1; }

      - name: Quick SSH ping
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          fingerprint: ${{ secrets.DEPLOY_HOST_FINGERPRINT }}
          port: 22
          timeout: 30s
          command_timeout: 2m
          script: |
            set -e
            whoami
            uname -a

      - name: SSH deploy
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          fingerprint: ${{ secrets.DEPLOY_HOST_FINGERPRINT }}
          port: 22
          timeout: 30s
          command_timeout: 30m
          script: |
            set -euo pipefail
            cd /opt/Big5-Quest

            # 1) コード更新
            git fetch --prune
            git reset --hard origin/main

            # 2) /etc/big5quest.env をSecretsで毎回再生成（中身はログ出さない）
            sudo bash -lc '
              set -euo pipefail
              umask 077
              tmp=$(mktemp)
              cat > "$tmp" <<EOF
              SECRET_KEY_BASE=${{ secrets.SECRET_KEY_BASE }}
              DB_HOST=${{ secrets.DB_HOST }}
              DB_PORT=${{ secrets.DB_PORT }}
              DB_NAME=${{ secrets.DB_NAME }}
              DB_USERNAME=${{ secrets.DB_USERNAME }}
              DB_PASSWORD=${{ secrets.DB_PASSWORD }}
              SENTRY_DSN=${{ secrets.SENTRY_DSN }}
              SENTRY_ENV=production
              RAILS_LOG_TO_STDOUT=1
              EOF
                            install -m 600 -o root -g root "$tmp" /etc/big5quest.env
                            rm -f "$tmp"
                            awk -F= "/^SECRET_KEY_BASE=/{print \"SECRET_KEY_BASE length=\" length(\$2)}" /etc/big5quest.env
                          '

                          # 3) Bundler & 依存
                          bundle config set without "development test"
                          bundle config set path "vendor/bundle"
                          bundle install --no-cache --jobs 3

                          # 4) DBマイグレーション（envを読み込んでec2-userで実行）
                          sudo bash -lc '
                            set -euo pipefail
                            set -a
                            source /etc/big5quest.env
                            set +a
                            cd /opt/Big5-Quest
                            sudo --preserve-env=RAILS_ENV,SECRET_KEY_BASE,DB_HOST,DB_PORT,DB_NAME,DB_USERNAME,DB_PASSWORD,SENTRY_DSN,SENTRY_ENV,RAILS_LOG_TO_STDOUT \
                              -u ec2-user bash -lc "
                                set -euo pipefail
                                export RAILS_ENV=production
                                bundle config set without \"development test\"
                                bundle config set path \"vendor/bundle\"
                                bundle install --no-cache --jobs 3
                                bin/rails db:migrate --trace
                              "
                          '

                          # 5) 再起動
                          sudo systemctl restart big5quest
                          sleep 2
                          sudo systemctl status --no-pager big5quest || true
                          sudo journalctl -u big5quest --no-pager -n 80 || true

                          # 6) ヘルスチェック（Nginx経由のHTTPS/SNIをローカルに解決）
                          tries=30; ok=0
                          for i in $(seq 1 $tries); do
                            if curl -fsS --resolve "api.big5-quest.com:443:127.0.0.1" https://api.big5-quest.com/up >/dev/null; then
                              echo "Health OK"; ok=1; break
                            fi
                            echo "Waiting app to boot... ($i/$tries)"
                            sleep 2
                          done
                          if [ "$ok" -ne 1 ]; then
                            echo "::error::Healthcheck failed. Last 200 logs:"
                            sudo journalctl -u big5quest --no-pager -n 200 || true
                            exit 1
                          fi
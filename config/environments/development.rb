require "active_support/core_ext/integer/time"

Rails.application.configure do
  # Settings specified here will take precedence over those in config/application.rb.

  # Make code changes take effect immediately without server restart.
  config.enable_reloading = true

  # Do not eager load code on boot.
  config.eager_load = false

  # Show full error reports.
  config.consider_all_requests_local = true

  # Enable server timing.
  config.server_timing = true

  # Enable/disable Action Controller caching. By default Action Controller caching is disabled.
  # Run rails dev:cache to toggle Action Controller caching.
  if Rails.root.join("tmp/caching-dev.txt").exist?
    config.public_file_server.headers = { "cache-control" => "public, max-age=#{2.days.to_i}" }
  else
    config.action_controller.perform_caching = false
  end

  # Change to :null_store to avoid any caching.
  config.cache_store = :memory_store

  # Store uploaded files on the local file system (see config/storage.yml for options).
  config.active_storage.service = :local

  # メール
  config.action_mailer.raise_delivery_errors = false
  config.action_mailer.perform_caching = false

  mailer_host     = ENV.fetch("DEV_MAILER_HOST", "localhost")
  mailer_port     = ENV.fetch("DEV_MAILER_PORT", 3000)
  mailer_protocol = ENV.fetch("DEV_MAILER_PROTOCOL", "http")

  config.action_mailer.default_url_options = {
    host: mailer_host,
    port: mailer_port,
    protocol: mailer_protocol
  }

  delivery_method = (ENV["DEV_MAILER_DELIVERY_METHOD"] || "file").to_sym
  config.action_mailer.delivery_method = delivery_method
  config.action_mailer.perform_deliveries = delivery_method != :test

  if delivery_method == :smtp
    require "active_model"
    boolean = ActiveModel::Type::Boolean.new

    config.action_mailer.smtp_settings = {
      address:              ENV["DEV_SMTP_ADDRESS"] || ENV["SMTP_ADDRESS"],
      port:                 (ENV["DEV_SMTP_PORT"] || ENV["SMTP_PORT"] || 587).to_i,
      domain:               ENV["DEV_SMTP_DOMAIN"] || ENV["SMTP_DOMAIN"],
      user_name:            ENV["DEV_SMTP_USERNAME"] || ENV["SMTP_USERNAME"],
      password:             ENV["DEV_SMTP_PASSWORD"] || ENV["SMTP_PASSWORD"],
      authentication:       (ENV["DEV_SMTP_AUTHENTICATION"] || ENV["SMTP_AUTHENTICATION"] || "plain").to_sym,
      enable_starttls_auto: boolean.cast(ENV.fetch("DEV_SMTP_ENABLE_STARTTLS_AUTO", ENV.fetch("SMTP_ENABLE_STARTTLS_AUTO", "true")))
    }.compact
  end

  # Print deprecation notices to the Rails logger.
  config.active_support.deprecation = :log

  # Raise an error on page load if there are pending migrations.
  config.active_record.migration_error = :page_load

  # Highlight code that triggered database queries in logs.
  config.active_record.verbose_query_logs = true

  # Append comments with runtime information tags to SQL queries in logs.
  config.active_record.query_log_tags_enabled = true

  # Highlight code that enqueued background job in logs.
  config.active_job.verbose_enqueue_logs = true

  # Raises error for missing translations.
  # config.i18n.raise_on_missing_translations = true

  # Annotate rendered view with file names.
  config.action_view.annotate_rendered_view_with_filenames = true

  # Uncomment if you wish to allow Action Cable access from any origin.
  # config.action_cable.disable_request_forgery_protection = true

  # Raise error when a before_action's only/except options reference missing actions.
  config.action_controller.raise_on_missing_callback_actions = true

  # Apply autocorrection by RuboCop to files generated by `bin/rails generate`.
  # config.generators.apply_rubocop_autocorrect_after_generate!
end
